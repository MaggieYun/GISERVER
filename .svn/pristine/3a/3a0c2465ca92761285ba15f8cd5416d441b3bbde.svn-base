#coding=utf-8
class Layer:

    QEURY_SQL = "select * from cols where table_name=upper('%s')"

    def __init__(self,definition):
        self.cache = None
        self.definition = definition
        self.definition.set_layer(self)
        self.image = None

    #param = QueryParameter.create(self)
    #param = QueryParameter(bbox,where,insr,outfields)
    #layer.query(param,outSr)
    def query(self,queryParameter,outsr):
        

        fields = ["SHAPE","type","properties"]
        aliases = fields
        features = []
        data_type = None

        sql = Layer.QEURY_SQL%self.definition.scheme_name
        conn = self.definition.conn#conn在layerdef中已经close，是否有影响？？？
        results = conn.execute(sql)#执行查询
        records = results.fetchall()#获取数据所有记录
        print records
        # keys = map(lambda key:key.upper(),results.keys())
        # conn.close()#关闭数据库连接,将connection放回连接池
        # results = map(lambda vals:dict(zip(keys,map(encodeAttr,vals))),records)


        # for point in points:
        #     x = point.get("TASK_POINT_LONGITUDE",0)
        #     y = point.get("TASK_POINT_LATITUDE",0)

        #     record = [[x,y],"POINT",point]
        #     features.append(record)

        results = {
            "fields":fields,
            "features":features,
            "aliases":aliases,
            "type":self.definition.data_type
        }

        return results

    def export(self,queryParameter,outsr):
        self.size = queryParameter.size
        self.bbox = queryParameter.bbox
        self.outsr = outsr
        self.image = Image.new("RGBA", self.size, (255,255,255,0))
        self.definition.style.rule.symbol.draw(self)
    
    def toScreen(self):
        pass

    def toGemtry(self):
        pass

class QueryParameter:
    def __init__(self,layer,bbox,where,insr,outfields,outsr):
        self.layer = layer
        self.bbox = bbox
        self.where = where
        self.insr = insr
        self.outfields = outfields
        self.outsr = outsr

    @classmethod
    def create(cls,requestHandler):
        self.layer = requestHandler.get_argument("layer")
        self.bbox = requestHandler.get_argument("bbox")
        self.where = requestHandler.get_argument("where")
        self.insr = requestHandler.get_argument("insr")
        self.outfields = requestHandler.get_argument("outfields")
        self.outsr = requestHandler.get_argument("outsr")  

    def toString(self):
        pass    

class QueryResult:
    def __init__(self,aliases,fields,features,layer_type):
        self.aliases = aliases
        self.fields = fields
        self.features = features
        self.type = layer_type 

    def toString(self):
        pass    