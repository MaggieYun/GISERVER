#coding=utf-8
from store import *
from extent import *
class Layer:

    def __init__(self,definition):
        self.cache = None
        self.definition = definition
        self.definition.set_layer(self)

        self.store=GiserverStore
        engine = self.definition.engine
        self.store.set_engine(engine)

    def reload(self):
        pass

    def query(self,queryParameter):
        aliases_dict,last_features=self.store.filter_data(self,queryParameter)
        
        aliases = aliases_dict.values()
        fields = aliases_dict.keys()
        gemetryType = self.definition.gemetryType 
        
        queryResult = QueryResult(aliases,fields,last_features,gemetryType)

        return queryResult


    def export(self,queryParameter,size):
        #遍历缓存类graphic中所有的graphics，绘制出symbol（考虑可使用layer.add()方法）
        img = self.definition.style.rule.symbol.draw(queryParameter,size)
        return img
    
    def toScreen(self):
        pass

    def toGemtry(self):
        pass

class QueryParameter:
    def __init__(self,bbox,where,insr,outfields,outsr):
        self.bbox = bbox
        self.where = where
        self.insr = insr
        self.outfields = outfields.split(",")
        self.outsr = outsr

    @classmethod
    def create(cls,requestHandler):
        self.layer = requestHandler.get_argument("layer")
        self.bbox = requestHandler.get_argument("bbox")
        self.where = requestHandler.get_argument("where",None)
        self.insr = requestHandler.get_argument("insr")
        self.outfields = requestHandler.get_argument("outfields")
        self.outsr = requestHandler.get_argument("outsr")  

    def toString(self):
        pass    


class QueryResult:
    def __init__(self,aliases,fields,features,layer_type):
        self.aliases = aliases
        self.fields = fields
        self.features = features
        self.type = layer_type 

    def toString(self):
        pass    






