#coding=utf-8
import os,sys
from sqlalchemy import create_engine
from style import *
from layerdef import *
try:
    import json
except ImportError:
    import simplejson as json

scope={}  #字典 给eval一个命名空间，一定程度预防安全隐患

class Singleton(type):
    def __init__(cls,name,bases,dic):
        super(Singleton, cls).__init__(name,bases,dic)
        cls.instance = None

    def __call__(cls,*args,**kwargs):
        if cls.instance is None:
            cls.instance = super(Singleton,cls).__call__(*args,**kwargs)
        return cls.instance
        
class LayerFactory:
    '''单例'''

    LAYER_CACHE = {}   #缓存

    __metaclass__ = Singleton

    def __init__(self,dirpath):
        self.dirpath = dirpath
        self.__parse()

    def __parse(self):
        self.config = ConfigManager(self.dirpath)
        
    def createLayer(self,filepath):
        layer = self.LAYER_CACHE.get(filepath)  #从缓存中判断该实例是否已创建
        if layer is None:
            print "from create"
            layerDef = self.config.get_layerDef(filepath)
            layer = Layer(layerDef) 
            self.LAYER_CACHE[filepath] = layer    
        return layer

    def removeLayer(self,layer_name):
        self.LAYER_CACHE.pop(layer_name)
        pass


class ConfigManager:
    '''单例'''

    __metaclass__ = Singleton

    def __init__(self,dirpath):
        self.dirpath = dirpath

    def get_layerDef(self,path):
        pathname = os.path.join(self.dirpath,path)
        stream = file(pathname, 'r').read()
        data = json.loads(stream)
        return LayerDef(data.get("content"))   
        

class Layer:
    def __init__(self,definition):
        self.cache = None
        self.definition = definition
        self.image = None

    def query(self,arg,outsr):
        pass

    def export(self,size,bbox,outsr):
        self.size = size
        self.bbox = bbox
        self.outsr = outsr
        self.image = Image.new("RGBA", self.size, (255,255,255,0))
        self.definition.style.rule.symbol.draw(self.image)


if __name__ == '__main__':
    dirpath = os.path.dirname(__file__)
    print dirpath
    path = os.path.join(dirpath, "configs")
    print path
    layerFactory = LayerFactory(path)
   
    layer1=layerFactory.createLayer('config2')
    errors = layer1.definition.validate()
    print errors
    # print layerFactory.LAYER_CACHE
    # layer2=layerFactory.createLayer('config2')  #验证缓存
    print "_______________________________________"
    layer2=layerFactory.createLayer('a\config')

    errors2 = layer2.definition.validate()
    print errors2

    print "_______________________________________"
    layer3=layerFactory.createLayer('config1')
    errors3 = layer3.definition.validate()
    print errors3



    




    

    # # layer2.export((400,400),(0,0),4326)
    # layer3=layerFactory.createLayer('a\config3.py')

