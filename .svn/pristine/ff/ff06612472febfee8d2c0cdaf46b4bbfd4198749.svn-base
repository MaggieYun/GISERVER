#coding=utf-8
import os
from layerdef import *
from layer import *
try:
    import json
except ImportError:
    import simplejson as json


class Singleton(type):
    def __init__(cls,name,bases,dic):
        super(Singleton, cls).__init__(name,bases,dic)
        cls.instance = None

    def __call__(cls,*args,**kwargs):
        if cls.instance is None:
            cls.instance = super(Singleton,cls).__call__(*args,**kwargs)
        return cls.instance
        
class LayerFactory:
    '''单例'''
    LAYER_CACHE = {}   #缓存
    __metaclass__ = Singleton

    def __init__(self,dirpath):
        self.dirpath = dirpath
        self.__parse()

    def __parse(self):
        self.config = ConfigManager(self.dirpath)
        
    def createLayer(self,filepath):
        layer = self.LAYER_CACHE.get(filepath)  #从缓存中判断该实例是否已创建
        if layer is None:
            print "from create"
            layerDef = self.config.get_layerDef(filepath)
            layer = Layer(layerDef) 
            self.LAYER_CACHE[filepath] = layer    
        return layer

    def removeLayer(self,layer_name):
        self.LAYER_CACHE.pop(layer_name)
        pass


class ConfigManager:
    '''单例'''
    __metaclass__ = Singleton

    def __init__(self,dirpath):
        self.dirpath = dirpath

    def get_layerDef(self,path):
        pathname = os.path.join(self.dirpath,path)
        stream = file(pathname, 'r').read()
        data = json.loads(stream)
        return LayerDef(data.get("content"))   
  




